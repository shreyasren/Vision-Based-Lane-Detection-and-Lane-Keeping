#! /usr/bin/env python

PACKAGE='traffic_sim_project_group_2'

from dynamic_reconfigure.msg import SensorLevels
from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

steering_mode_list = gen.enum( [gen.const("YAW_RATE_MODE",   int_t, 0, ""),
                                gen.const("CURVATURE_MODE",  int_t, 1, "")], 
                                "Steering mode selection")

#       Name              Type       Lvl    Description                                  Default    Min    Max
gen.add("lookahead_dist", double_t,  0,     "Distance to look ahead to select target",   20.0,      0.1,   50.0)
gen.add("Enb_Dis_CfgLookAhead",    bool_t,    0,     "Enable or Disable Look Ahead CFG value",        False)

#       Name                Type       Lvl    Description                           Default    Min     Max
gen.add("enable_pedals",    bool_t,    0,     "Enable speed control of ULC",        True)
gen.add("enable_steering",  bool_t,    0,     "Enable steering control of ULC",     True)
gen.add("linear_velocity",  double_t,  0,     "Forward speed input",                7.0,       -4.5,  15.0)
gen.add("yaw_command",      double_t,  0,     "Curvature or yaw rate input",        0.0,       -2.0,  2.0)
gen.add("steering_mode",    int_t,     0,     "ULC steering mode",                  1, edit_method = steering_mode_list)
#       Name                Type      Level     Description                             Default   Min     Max
gen.add("h_center",         int_t,    0,        "Hue threshold center",                 27,       0,      180)
gen.add("h_width",          int_t,    0,        "Hue threshold width",                  6,        1,      90)
gen.add("val_thres",        int_t,    0,        "Value threshold",                      130,      0,      255)
gen.add("sat_thres",        int_t,    0,        "Saturation threshold",                 70,       0,      255)
gen.add("mask_height",      int_t,    0,        "Mask height",                          296,      0,      767)
gen.add("cluster_tol",      double_t, 0,        "Distance to include point in cluster", 3.0,      0.1,    10.0)
gen.add("min_cluster_size", int_t,    0,        "Minimum points in a cluster",          20,       1,      1000)
gen.add("max_cluster_size", int_t,    0,        "Maximum points in a cluster",          500,      100,    2000)
gen.add("fit_order",        int_t,    0,        "Polynomial order for curve fitting",   2,        1,      6)
gen.add("rms_tolerance",    double_t, 0,        "RMS error threshold",                  0.2,      0.001,  10.0)

gen.add("y_axis_test",      double_t, 0,         "Y-Axis Testing",                      -0.7,      -2.0,    2.0 )


exit(gen.generate(PACKAGE, PACKAGE, "LaneDetection"))
